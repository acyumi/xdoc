# Copyright 2025 acyumi <417064257@qq.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# execute command locally in container environment: ./builder.sh act
name: XDoc CI Pipeline
on: [push, pull_request]

permissions:
  contents: write

jobs:
  Quality-Inspections:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Extract Go Version From go.mod
        id: read-go-version
        run: |
          echo "GITHUB_ACTOR: ${{ env.GITHUB_ACTOR }}"
          echo "GITHUB_ENV: `cat $GITHUB_ENV`"
          GO_VERSION=$(awk '/^go / {print $2}' go.mod | tr -d '\n')
          echo "Go version detected: $GO_VERSION"
          echo "GO_VERSION=$GO_VERSION" >> $GITHUB_ENV
          echo "GITHUB_ENV: `cat $GITHUB_ENV`"

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/go/bin
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}

      - name: Initialize Builder
        run: |
          chmod +x ./builder.sh
          ls -lh ~/go/bin

      - name: Lint Code
        run: ./builder.sh lint
      - name: Run Unit Tests
        run: |
          ./builder.sh test -t

      - name: Upload Coverage Report
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

      - name: Get Current Job ID
        id: get-current-job-id
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_API_URL: ${{ env.GITHUB_API_URL }}
        run: |
          echo "GITHUB_TOKEN: ${GITHUB_TOKEN}"
          echo "GITHUB_API_URL: ${GITHUB_API_URL}"
          echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
          echo "GITHUB_RUN_ID: ${GITHUB_RUN_ID}"
          echo "GITHUB_RUN_ID: ${GITHUB_RUN_ID}"
          response=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}/jobs")
          echo "response: ${response}"
          job_id=`echo $response | yq '.jobs[] | select(.name == "Quality-Inspections") | .id'`
          echo "job_id: ${job_id}"
          echo "job_id=${job_id}" >> $GITHUB_OUTPUT

      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          clean: false

      - name: Update Coverage Files
        run: |
          echo "ls -lh docs"
          ls -lh docs
          # check coverage result
          coverage=`go tool cover -func=coverage.out | grep 'total' | awk '{print $3}' | tr -d '%'`
          echo "Got coverage: ${coverage}"
          if [[ ! -f "coverage.html" ]]; then
            echo "Can not got coverage report: coverage.html"
            exit 1
          fi
          echo "Got coverage report: coverage.html"
          # check and install yq
          if ! command -v "yq" &>/dev/null; then
            go install github.com/mikefarah/yq/v4@v4.45.1
            which yq
          fi
          if [[ -f "docs/coverage_reports.json" ]]; then
            is_format_corrected=`yq 'length==0' docs/coverage_reports.json`
            if [[ "$is_format_corrected" != "true" ]]; then
              yq -n -o=json '[]' > docs/coverage_reports.json
            fi
          else
            yq -n -o=json '[]' > docs/coverage_reports.json
          fi
          run_id=${{ github.run_id }}
          job_id=${{ steps.get-current-job-id.outputs.job_id }}
          echo "run_id: ${run_id}"
          echo "job_id: ${job_id}"
          file_name="coverage_${run_id}_${job_id}_${coverage}.html"
          test_date=`date +"%b %d, %Y %I:%M %p"`
          coverage_report=`cat <<-EOF
          {
            "fileName": "$file_name",
            "runId": "$run_id",
            "jobId": "$job_id",
            "date": "$test_date",
            "coverage": "$coverage"
          }
          EOF`
          yq -i ". += $coverage_report" docs/coverage_reports.json
          echo "yq docs/coverage_reports.json"
          yq docs/coverage_reports.json
          mv coverage.html docs/$file_name
          rm -f coverage.out
          echo "ls -lh docs"
          ls -lh docs

      - name: Deploy to GitHub Pages
        if: ${{ !env.ACT }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

      # TODO send msg to me
