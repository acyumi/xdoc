// Code generated by mockery v2.53.2. DO NOT EDIT.

package cmd

import (
	argument "github.com/acyumi/xdoc/component/argument"
	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"

	viper "github.com/spf13/viper"
)

// MockCommand is an autogenerated mock type for the command type
type MockCommand struct {
	mock.Mock
}

type MockCommand_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommand) EXPECT() *MockCommand_Expecter {
	return &MockCommand_Expecter{mock: &_m.Mock}
}

// bind provides a mock function with no fields
func (_m *MockCommand) bind() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for bind")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommand_bind_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'bind'
type MockCommand_bind_Call struct {
	*mock.Call
}

// bind is a helper method to define mock.On call
func (_e *MockCommand_Expecter) bind() *MockCommand_bind_Call {
	return &MockCommand_bind_Call{Call: _e.mock.On("bind")}
}

func (_c *MockCommand_bind_Call) Run(run func()) *MockCommand_bind_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_bind_Call) Return(_a0 error) *MockCommand_bind_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_bind_Call) RunAndReturn(run func() error) *MockCommand_bind_Call {
	_c.Call.Return(run)
	return _c
}

// children provides a mock function with no fields
func (_m *MockCommand) children() []command {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for children")
	}

	var r0 []command
	if rf, ok := ret.Get(0).(func() []command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]command)
		}
	}

	return r0
}

// MockCommand_children_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'children'
type MockCommand_children_Call struct {
	*mock.Call
}

// children is a helper method to define mock.On call
func (_e *MockCommand_Expecter) children() *MockCommand_children_Call {
	return &MockCommand_children_Call{Call: _e.mock.On("children")}
}

func (_c *MockCommand_children_Call) Run(run func()) *MockCommand_children_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_children_Call) Return(_a0 []command) *MockCommand_children_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_children_Call) RunAndReturn(run func() []command) *MockCommand_children_Call {
	_c.Call.Return(run)
	return _c
}

// exec provides a mock function with no fields
func (_m *MockCommand) exec() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for exec")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommand_exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'exec'
type MockCommand_exec_Call struct {
	*mock.Call
}

// exec is a helper method to define mock.On call
func (_e *MockCommand_Expecter) exec() *MockCommand_exec_Call {
	return &MockCommand_exec_Call{Call: _e.mock.On("exec")}
}

func (_c *MockCommand_exec_Call) Run(run func()) *MockCommand_exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_exec_Call) Return(_a0 error) *MockCommand_exec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_exec_Call) RunAndReturn(run func() error) *MockCommand_exec_Call {
	_c.Call.Return(run)
	return _c
}

// get provides a mock function with no fields
func (_m *MockCommand) get() *cobra.Command {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for get")
	}

	var r0 *cobra.Command
	if rf, ok := ret.Get(0).(func() *cobra.Command); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cobra.Command)
		}
	}

	return r0
}

// MockCommand_get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'get'
type MockCommand_get_Call struct {
	*mock.Call
}

// get is a helper method to define mock.On call
func (_e *MockCommand_Expecter) get() *MockCommand_get_Call {
	return &MockCommand_get_Call{Call: _e.mock.On("get")}
}

func (_c *MockCommand_get_Call) Run(run func()) *MockCommand_get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCommand_get_Call) Return(_a0 *cobra.Command) *MockCommand_get_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommand_get_Call) RunAndReturn(run func() *cobra.Command) *MockCommand_get_Call {
	_c.Call.Return(run)
	return _c
}

// init provides a mock function with given fields: vip, args
func (_m *MockCommand) init(vip *viper.Viper, args *argument.Args) {
	_m.Called(vip, args)
}

// MockCommand_init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'init'
type MockCommand_init_Call struct {
	*mock.Call
}

// init is a helper method to define mock.On call
//   - vip *viper.Viper
//   - args *argument.Args
func (_e *MockCommand_Expecter) init(vip any, args any) *MockCommand_init_Call {
	return &MockCommand_init_Call{Call: _e.mock.On("init", vip, args)}
}

func (_c *MockCommand_init_Call) Run(run func(vip *viper.Viper, args *argument.Args)) *MockCommand_init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*viper.Viper), args[1].(*argument.Args))
	})
	return _c
}

func (_c *MockCommand_init_Call) Return() *MockCommand_init_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockCommand_init_Call) RunAndReturn(run func(*viper.Viper, *argument.Args)) *MockCommand_init_Call {
	_c.Run(run)
	return _c
}

// NewMockCommand creates a new instance of MockCommand. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommand(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommand {
	mock := &MockCommand{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
