// Code generated by mockery v2.53.0. DO NOT EDIT.

package progress

import mock "github.com/stretchr/testify/mock"

// MockStats is an autogenerated mock type for the Stats type
type MockStats struct {
	mock.Mock
}

type MockStats_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStats) EXPECT() *MockStats_Expecter {
	return &MockStats_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: total, downloaded, failed
func (_m *MockStats) Execute(total int, downloaded int, failed int) string {
	ret := _m.Called(total, downloaded, failed)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(int, int, int) string); ok {
		r0 = rf(total, downloaded, failed)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockStats_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockStats_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - total int
//   - downloaded int
//   - failed int
func (_e *MockStats_Expecter) Execute(total any, downloaded any, failed any) *MockStats_Execute_Call {
	return &MockStats_Execute_Call{Call: _e.mock.On("Execute", total, downloaded, failed)}
}

func (_c *MockStats_Execute_Call) Run(run func(total int, downloaded int, failed int)) *MockStats_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *MockStats_Execute_Call) Return(_a0 string) *MockStats_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStats_Execute_Call) RunAndReturn(run func(int, int, int) string) *MockStats_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStats creates a new instance of MockStats. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStats(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStats {
	mock := &MockStats{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
