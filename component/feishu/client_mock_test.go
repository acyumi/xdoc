// Code generated by mockery v2.53.2. DO NOT EDIT.

package feishu

import (
	argument "github.com/acyumi/doc-exporter/component/argument"
	cloud "github.com/acyumi/doc-exporter/component/cloud"

	context "context"

	larkcore "github.com/larksuite/oapi-sdk-go/v3/core"

	larkdrive "github.com/larksuite/oapi-sdk-go/v3/service/drive/v1"

	larkwiki "github.com/larksuite/oapi-sdk-go/v3/service/wiki/v2"

	mock "github.com/stretchr/testify/mock"

	progress "github.com/acyumi/doc-exporter/component/progress"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: docs, programConstructor
func (_m *MockClient) CreateTask(docs *DocumentNode, programConstructor func(progress.Stats) progress.IProgram) cloud.Task {
	ret := _m.Called(docs, programConstructor)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 cloud.Task
	if rf, ok := ret.Get(0).(func(*DocumentNode, func(progress.Stats) progress.IProgram) cloud.Task); ok {
		r0 = rf(docs, programConstructor)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cloud.Task)
		}
	}

	return r0
}

// MockClient_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockClient_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - docs *DocumentNode
//   - programConstructor func([]string , progress.Stats) progress.IProgram
func (_e *MockClient_Expecter) CreateTask(docs any, programConstructor any) *MockClient_CreateTask_Call {
	return &MockClient_CreateTask_Call{Call: _e.mock.On("CreateTask", docs, programConstructor)}
}

func (_c *MockClient_CreateTask_Call) Run(run func(docs *DocumentNode, programConstructor func([]string, progress.Stats) progress.IProgram)) *MockClient_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*DocumentNode), args[1].(func([]string, progress.Stats) progress.IProgram))
	})
	return _c
}

func (_c *MockClient_CreateTask_Call) Return(_a0 cloud.Task) *MockClient_CreateTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_CreateTask_Call) RunAndReturn(run func(*DocumentNode, func([]string, progress.Stats) progress.IProgram) cloud.Task) *MockClient_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DownloadDocuments provides a mock function with given fields: typ, token
func (_m *MockClient) DownloadDocuments(typ string, token string) error {
	ret := _m.Called(typ, token)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDocuments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(typ, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_DownloadDocuments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DownloadDocuments'
type MockClient_DownloadDocuments_Call struct {
	*mock.Call
}

// DownloadDocuments is a helper method to define mock.On call
//   - typ string
//   - token string
func (_e *MockClient_Expecter) DownloadDocuments(typ any, token any) *MockClient_DownloadDocuments_Call {
	return &MockClient_DownloadDocuments_Call{Call: _e.mock.On("DownloadDocuments", typ, token)}
}

func (_c *MockClient_DownloadDocuments_Call) Run(run func(typ string, token string)) *MockClient_DownloadDocuments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockClient_DownloadDocuments_Call) Return(_a0 error) *MockClient_DownloadDocuments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_DownloadDocuments_Call) RunAndReturn(run func(string, string) error) *MockClient_DownloadDocuments_Call {
	_c.Call.Return(run)
	return _c
}

// DriveBatchQuery provides a mock function with given fields: ctx, req, options
func (_m *MockClient) DriveBatchQuery(ctx context.Context, req *larkdrive.BatchQueryMetaReq, options ...larkcore.RequestOptionFunc) (*larkdrive.BatchQueryMetaResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DriveBatchQuery")
	}

	var r0 *larkdrive.BatchQueryMetaResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.BatchQueryMetaReq, ...larkcore.RequestOptionFunc) (*larkdrive.BatchQueryMetaResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.BatchQueryMetaReq, ...larkcore.RequestOptionFunc) *larkdrive.BatchQueryMetaResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkdrive.BatchQueryMetaResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkdrive.BatchQueryMetaReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DriveBatchQuery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DriveBatchQuery'
type MockClient_DriveBatchQuery_Call struct {
	*mock.Call
}

// DriveBatchQuery is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkdrive.BatchQueryMetaReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) DriveBatchQuery(ctx any, req any, options ...any) *MockClient_DriveBatchQuery_Call {
	return &MockClient_DriveBatchQuery_Call{Call: _e.mock.On("DriveBatchQuery",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_DriveBatchQuery_Call) Run(run func(ctx context.Context, req *larkdrive.BatchQueryMetaReq, options ...larkcore.RequestOptionFunc)) *MockClient_DriveBatchQuery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkdrive.BatchQueryMetaReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_DriveBatchQuery_Call) Return(_a0 *larkdrive.BatchQueryMetaResp, _a1 error) *MockClient_DriveBatchQuery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DriveBatchQuery_Call) RunAndReturn(run func(context.Context, *larkdrive.BatchQueryMetaReq, ...larkcore.RequestOptionFunc) (*larkdrive.BatchQueryMetaResp, error)) *MockClient_DriveBatchQuery_Call {
	_c.Call.Return(run)
	return _c
}

// DriveDownload provides a mock function with given fields: ctx, req, options
func (_m *MockClient) DriveDownload(ctx context.Context, req *larkdrive.DownloadFileReq, options ...larkcore.RequestOptionFunc) (*larkdrive.DownloadFileResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DriveDownload")
	}

	var r0 *larkdrive.DownloadFileResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.DownloadFileReq, ...larkcore.RequestOptionFunc) (*larkdrive.DownloadFileResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.DownloadFileReq, ...larkcore.RequestOptionFunc) *larkdrive.DownloadFileResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkdrive.DownloadFileResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkdrive.DownloadFileReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DriveDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DriveDownload'
type MockClient_DriveDownload_Call struct {
	*mock.Call
}

// DriveDownload is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkdrive.DownloadFileReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) DriveDownload(ctx any, req any, options ...any) *MockClient_DriveDownload_Call {
	return &MockClient_DriveDownload_Call{Call: _e.mock.On("DriveDownload",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_DriveDownload_Call) Run(run func(ctx context.Context, req *larkdrive.DownloadFileReq, options ...larkcore.RequestOptionFunc)) *MockClient_DriveDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkdrive.DownloadFileReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_DriveDownload_Call) Return(_a0 *larkdrive.DownloadFileResp, _a1 error) *MockClient_DriveDownload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DriveDownload_Call) RunAndReturn(run func(context.Context, *larkdrive.DownloadFileReq, ...larkcore.RequestOptionFunc) (*larkdrive.DownloadFileResp, error)) *MockClient_DriveDownload_Call {
	_c.Call.Return(run)
	return _c
}

// DriveList provides a mock function with given fields: ctx, req, options
func (_m *MockClient) DriveList(ctx context.Context, req *larkdrive.ListFileReq, options ...larkcore.RequestOptionFunc) (*larkdrive.ListFileResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DriveList")
	}

	var r0 *larkdrive.ListFileResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.ListFileReq, ...larkcore.RequestOptionFunc) (*larkdrive.ListFileResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.ListFileReq, ...larkcore.RequestOptionFunc) *larkdrive.ListFileResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkdrive.ListFileResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkdrive.ListFileReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_DriveList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DriveList'
type MockClient_DriveList_Call struct {
	*mock.Call
}

// DriveList is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkdrive.ListFileReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) DriveList(ctx any, req any, options ...any) *MockClient_DriveList_Call {
	return &MockClient_DriveList_Call{Call: _e.mock.On("DriveList",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_DriveList_Call) Run(run func(ctx context.Context, req *larkdrive.ListFileReq, options ...larkcore.RequestOptionFunc)) *MockClient_DriveList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkdrive.ListFileReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_DriveList_Call) Return(_a0 *larkdrive.ListFileResp, _a1 error) *MockClient_DriveList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_DriveList_Call) RunAndReturn(run func(context.Context, *larkdrive.ListFileReq, ...larkcore.RequestOptionFunc) (*larkdrive.ListFileResp, error)) *MockClient_DriveList_Call {
	_c.Call.Return(run)
	return _c
}

// ExportCreate provides a mock function with given fields: ctx, req, options
func (_m *MockClient) ExportCreate(ctx context.Context, req *larkdrive.CreateExportTaskReq, options ...larkcore.RequestOptionFunc) (*larkdrive.CreateExportTaskResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportCreate")
	}

	var r0 *larkdrive.CreateExportTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.CreateExportTaskReq, ...larkcore.RequestOptionFunc) (*larkdrive.CreateExportTaskResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.CreateExportTaskReq, ...larkcore.RequestOptionFunc) *larkdrive.CreateExportTaskResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkdrive.CreateExportTaskResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkdrive.CreateExportTaskReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ExportCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportCreate'
type MockClient_ExportCreate_Call struct {
	*mock.Call
}

// ExportCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkdrive.CreateExportTaskReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) ExportCreate(ctx any, req any, options ...any) *MockClient_ExportCreate_Call {
	return &MockClient_ExportCreate_Call{Call: _e.mock.On("ExportCreate",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_ExportCreate_Call) Run(run func(ctx context.Context, req *larkdrive.CreateExportTaskReq, options ...larkcore.RequestOptionFunc)) *MockClient_ExportCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkdrive.CreateExportTaskReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_ExportCreate_Call) Return(_a0 *larkdrive.CreateExportTaskResp, _a1 error) *MockClient_ExportCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ExportCreate_Call) RunAndReturn(run func(context.Context, *larkdrive.CreateExportTaskReq, ...larkcore.RequestOptionFunc) (*larkdrive.CreateExportTaskResp, error)) *MockClient_ExportCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ExportDownload provides a mock function with given fields: ctx, req, options
func (_m *MockClient) ExportDownload(ctx context.Context, req *larkdrive.DownloadExportTaskReq, options ...larkcore.RequestOptionFunc) (*larkdrive.DownloadExportTaskResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportDownload")
	}

	var r0 *larkdrive.DownloadExportTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.DownloadExportTaskReq, ...larkcore.RequestOptionFunc) (*larkdrive.DownloadExportTaskResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.DownloadExportTaskReq, ...larkcore.RequestOptionFunc) *larkdrive.DownloadExportTaskResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkdrive.DownloadExportTaskResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkdrive.DownloadExportTaskReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ExportDownload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportDownload'
type MockClient_ExportDownload_Call struct {
	*mock.Call
}

// ExportDownload is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkdrive.DownloadExportTaskReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) ExportDownload(ctx any, req any, options ...any) *MockClient_ExportDownload_Call {
	return &MockClient_ExportDownload_Call{Call: _e.mock.On("ExportDownload",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_ExportDownload_Call) Run(run func(ctx context.Context, req *larkdrive.DownloadExportTaskReq, options ...larkcore.RequestOptionFunc)) *MockClient_ExportDownload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkdrive.DownloadExportTaskReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_ExportDownload_Call) Return(_a0 *larkdrive.DownloadExportTaskResp, _a1 error) *MockClient_ExportDownload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ExportDownload_Call) RunAndReturn(run func(context.Context, *larkdrive.DownloadExportTaskReq, ...larkcore.RequestOptionFunc) (*larkdrive.DownloadExportTaskResp, error)) *MockClient_ExportDownload_Call {
	_c.Call.Return(run)
	return _c
}

// ExportGet provides a mock function with given fields: ctx, req, options
func (_m *MockClient) ExportGet(ctx context.Context, req *larkdrive.GetExportTaskReq, options ...larkcore.RequestOptionFunc) (*larkdrive.GetExportTaskResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportGet")
	}

	var r0 *larkdrive.GetExportTaskResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.GetExportTaskReq, ...larkcore.RequestOptionFunc) (*larkdrive.GetExportTaskResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkdrive.GetExportTaskReq, ...larkcore.RequestOptionFunc) *larkdrive.GetExportTaskResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkdrive.GetExportTaskResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkdrive.GetExportTaskReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ExportGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExportGet'
type MockClient_ExportGet_Call struct {
	*mock.Call
}

// ExportGet is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkdrive.GetExportTaskReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) ExportGet(ctx any, req any, options ...any) *MockClient_ExportGet_Call {
	return &MockClient_ExportGet_Call{Call: _e.mock.On("ExportGet",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_ExportGet_Call) Run(run func(ctx context.Context, req *larkdrive.GetExportTaskReq, options ...larkcore.RequestOptionFunc)) *MockClient_ExportGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkdrive.GetExportTaskReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_ExportGet_Call) Return(_a0 *larkdrive.GetExportTaskResp, _a1 error) *MockClient_ExportGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ExportGet_Call) RunAndReturn(run func(context.Context, *larkdrive.GetExportTaskReq, ...larkcore.RequestOptionFunc) (*larkdrive.GetExportTaskResp, error)) *MockClient_ExportGet_Call {
	_c.Call.Return(run)
	return _c
}

// GetArgs provides a mock function with no fields
func (_m *MockClient) GetArgs() *argument.Args {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetArgs")
	}

	var r0 *argument.Args
	if rf, ok := ret.Get(0).(func() *argument.Args); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*argument.Args)
		}
	}

	return r0
}

// MockClient_GetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArgs'
type MockClient_GetArgs_Call struct {
	*mock.Call
}

// GetArgs is a helper method to define mock.On call
func (_e *MockClient_Expecter) GetArgs() *MockClient_GetArgs_Call {
	return &MockClient_GetArgs_Call{Call: _e.mock.On("GetArgs")}
}

func (_c *MockClient_GetArgs_Call) Run(run func()) *MockClient_GetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_GetArgs_Call) Return(_a0 *argument.Args) *MockClient_GetArgs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_GetArgs_Call) RunAndReturn(run func() *argument.Args) *MockClient_GetArgs_Call {
	_c.Call.Return(run)
	return _c
}

// SetArgs provides a mock function with given fields: args
func (_m *MockClient) SetArgs(args *argument.Args) {
	_m.Called(args)
}

// MockClient_SetArgs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetArgs'
type MockClient_SetArgs_Call struct {
	*mock.Call
}

// SetArgs is a helper method to define mock.On call
//   - args *argument.Args
func (_e *MockClient_Expecter) SetArgs(args any) *MockClient_SetArgs_Call {
	return &MockClient_SetArgs_Call{Call: _e.mock.On("SetArgs", args)}
}

func (_c *MockClient_SetArgs_Call) Run(run func(args *argument.Args)) *MockClient_SetArgs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*argument.Args))
	})
	return _c
}

func (_c *MockClient_SetArgs_Call) Return() *MockClient_SetArgs_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockClient_SetArgs_Call) RunAndReturn(run func(*argument.Args)) *MockClient_SetArgs_Call {
	_c.Run(run)
	return _c
}

// Validate provides a mock function with no fields
func (_m *MockClient) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockClient_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type MockClient_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
func (_e *MockClient_Expecter) Validate() *MockClient_Validate_Call {
	return &MockClient_Validate_Call{Call: _e.mock.On("Validate")}
}

func (_c *MockClient_Validate_Call) Run(run func()) *MockClient_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockClient_Validate_Call) Return(_a0 error) *MockClient_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockClient_Validate_Call) RunAndReturn(run func() error) *MockClient_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// WikiGetNode provides a mock function with given fields: ctx, req, options
func (_m *MockClient) WikiGetNode(ctx context.Context, req *larkwiki.GetNodeSpaceReq, options ...larkcore.RequestOptionFunc) (*larkwiki.GetNodeSpaceResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WikiGetNode")
	}

	var r0 *larkwiki.GetNodeSpaceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkwiki.GetNodeSpaceReq, ...larkcore.RequestOptionFunc) (*larkwiki.GetNodeSpaceResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkwiki.GetNodeSpaceReq, ...larkcore.RequestOptionFunc) *larkwiki.GetNodeSpaceResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkwiki.GetNodeSpaceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkwiki.GetNodeSpaceReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_WikiGetNode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WikiGetNode'
type MockClient_WikiGetNode_Call struct {
	*mock.Call
}

// WikiGetNode is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkwiki.GetNodeSpaceReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) WikiGetNode(ctx any, req any, options ...any) *MockClient_WikiGetNode_Call {
	return &MockClient_WikiGetNode_Call{Call: _e.mock.On("WikiGetNode",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_WikiGetNode_Call) Run(run func(ctx context.Context, req *larkwiki.GetNodeSpaceReq, options ...larkcore.RequestOptionFunc)) *MockClient_WikiGetNode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkwiki.GetNodeSpaceReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_WikiGetNode_Call) Return(_a0 *larkwiki.GetNodeSpaceResp, _a1 error) *MockClient_WikiGetNode_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_WikiGetNode_Call) RunAndReturn(run func(context.Context, *larkwiki.GetNodeSpaceReq, ...larkcore.RequestOptionFunc) (*larkwiki.GetNodeSpaceResp, error)) *MockClient_WikiGetNode_Call {
	_c.Call.Return(run)
	return _c
}

// WikiGetSpace provides a mock function with given fields: ctx, req, options
func (_m *MockClient) WikiGetSpace(ctx context.Context, req *larkwiki.GetSpaceReq, options ...larkcore.RequestOptionFunc) (*larkwiki.GetSpaceResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WikiGetSpace")
	}

	var r0 *larkwiki.GetSpaceResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkwiki.GetSpaceReq, ...larkcore.RequestOptionFunc) (*larkwiki.GetSpaceResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkwiki.GetSpaceReq, ...larkcore.RequestOptionFunc) *larkwiki.GetSpaceResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkwiki.GetSpaceResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkwiki.GetSpaceReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_WikiGetSpace_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WikiGetSpace'
type MockClient_WikiGetSpace_Call struct {
	*mock.Call
}

// WikiGetSpace is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkwiki.GetSpaceReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) WikiGetSpace(ctx any, req any, options ...any) *MockClient_WikiGetSpace_Call {
	return &MockClient_WikiGetSpace_Call{Call: _e.mock.On("WikiGetSpace",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_WikiGetSpace_Call) Run(run func(ctx context.Context, req *larkwiki.GetSpaceReq, options ...larkcore.RequestOptionFunc)) *MockClient_WikiGetSpace_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkwiki.GetSpaceReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_WikiGetSpace_Call) Return(_a0 *larkwiki.GetSpaceResp, _a1 error) *MockClient_WikiGetSpace_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_WikiGetSpace_Call) RunAndReturn(run func(context.Context, *larkwiki.GetSpaceReq, ...larkcore.RequestOptionFunc) (*larkwiki.GetSpaceResp, error)) *MockClient_WikiGetSpace_Call {
	_c.Call.Return(run)
	return _c
}

// WikiNodeList provides a mock function with given fields: ctx, req, options
func (_m *MockClient) WikiNodeList(ctx context.Context, req *larkwiki.ListSpaceNodeReq, options ...larkcore.RequestOptionFunc) (*larkwiki.ListSpaceNodeResp, error) {
	_va := make([]any, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []any
	_ca = append(_ca, ctx, req)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WikiNodeList")
	}

	var r0 *larkwiki.ListSpaceNodeResp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *larkwiki.ListSpaceNodeReq, ...larkcore.RequestOptionFunc) (*larkwiki.ListSpaceNodeResp, error)); ok {
		return rf(ctx, req, options...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *larkwiki.ListSpaceNodeReq, ...larkcore.RequestOptionFunc) *larkwiki.ListSpaceNodeResp); ok {
		r0 = rf(ctx, req, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*larkwiki.ListSpaceNodeResp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *larkwiki.ListSpaceNodeReq, ...larkcore.RequestOptionFunc) error); ok {
		r1 = rf(ctx, req, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_WikiNodeList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WikiNodeList'
type MockClient_WikiNodeList_Call struct {
	*mock.Call
}

// WikiNodeList is a helper method to define mock.On call
//   - ctx context.Context
//   - req *larkwiki.ListSpaceNodeReq
//   - options ...larkcore.RequestOptionFunc
func (_e *MockClient_Expecter) WikiNodeList(ctx any, req any, options ...any) *MockClient_WikiNodeList_Call {
	return &MockClient_WikiNodeList_Call{Call: _e.mock.On("WikiNodeList",
		append([]any{ctx, req}, options...)...)}
}

func (_c *MockClient_WikiNodeList_Call) Run(run func(ctx context.Context, req *larkwiki.ListSpaceNodeReq, options ...larkcore.RequestOptionFunc)) *MockClient_WikiNodeList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]larkcore.RequestOptionFunc, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(larkcore.RequestOptionFunc)
			}
		}
		run(args[0].(context.Context), args[1].(*larkwiki.ListSpaceNodeReq), variadicArgs...)
	})
	return _c
}

func (_c *MockClient_WikiNodeList_Call) Return(_a0 *larkwiki.ListSpaceNodeResp, _a1 error) *MockClient_WikiNodeList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_WikiNodeList_Call) RunAndReturn(run func(context.Context, *larkwiki.ListSpaceNodeReq, ...larkcore.RequestOptionFunc) (*larkwiki.ListSpaceNodeResp, error)) *MockClient_WikiNodeList_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
