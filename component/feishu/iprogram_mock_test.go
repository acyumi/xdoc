// Code generated by mockery v2.53.2. DO NOT EDIT.

package feishu

import (
	progress "github.com/acyumi/doc-exporter/component/progress"
	tea "github.com/charmbracelet/bubbletea"
	mock "github.com/stretchr/testify/mock"
)

// MockProgram is an autogenerated mock type for the IProgram type
type MockProgram struct {
	mock.Mock
}

type MockProgram_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProgram) EXPECT() *MockProgram_Expecter {
	return &MockProgram_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: key, fileName
func (_m *MockProgram) Add(key string, fileName string) {
	_m.Called(key, fileName)
}

// MockProgram_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type MockProgram_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - key string
//   - fileName string
func (_e *MockProgram_Expecter) Add(key any, fileName any) *MockProgram_Add_Call {
	return &MockProgram_Add_Call{Call: _e.mock.On("Add", key, fileName)}
}

func (_c *MockProgram_Add_Call) Run(run func(key string, fileName string)) *MockProgram_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockProgram_Add_Call) Return() *MockProgram_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgram_Add_Call) RunAndReturn(run func(string, string)) *MockProgram_Add_Call {
	_c.Run(run)
	return _c
}

// Quit provides a mock function with no fields
func (_m *MockProgram) Quit() {
	_m.Called()
}

// MockProgram_Quit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Quit'
type MockProgram_Quit_Call struct {
	*mock.Call
}

// Quit is a helper method to define mock.On call
func (_e *MockProgram_Expecter) Quit() *MockProgram_Quit_Call {
	return &MockProgram_Quit_Call{Call: _e.mock.On("Quit")}
}

func (_c *MockProgram_Quit_Call) Run(run func()) *MockProgram_Quit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProgram_Quit_Call) Return() *MockProgram_Quit_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgram_Quit_Call) RunAndReturn(run func()) *MockProgram_Quit_Call {
	_c.Run(run)
	return _c
}

// Run provides a mock function with no fields
func (_m *MockProgram) Run() (tea.Model, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 tea.Model
	var r1 error
	if rf, ok := ret.Get(0).(func() (tea.Model, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() tea.Model); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tea.Model)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProgram_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type MockProgram_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *MockProgram_Expecter) Run() *MockProgram_Run_Call {
	return &MockProgram_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *MockProgram_Run_Call) Run(run func()) *MockProgram_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockProgram_Run_Call) Return(_a0 tea.Model, _a1 error) *MockProgram_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProgram_Run_Call) RunAndReturn(run func() (tea.Model, error)) *MockProgram_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: key, _a1, status, msgFormat
func (_m *MockProgram) Update(key string, _a1 float64, status progress.Status, msgFormat ...any) {
	var _ca []any
	_ca = append(_ca, key, _a1, status)
	_ca = append(_ca, msgFormat...)
	_m.Called(_ca...)
}

// MockProgram_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockProgram_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - key string
//   - _a1 float64
//   - status progress.Status
//   - msgFormat ...interface{}
func (_e *MockProgram_Expecter) Update(key any, _a1 any, status any, msgFormat ...any) *MockProgram_Update_Call {
	return &MockProgram_Update_Call{Call: _e.mock.On("Update",
		append([]any{key, _a1, status}, msgFormat...)...)}
}

func (_c *MockProgram_Update_Call) Run(run func(key string, _a1 float64, status progress.Status, msgFormat ...any)) *MockProgram_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]any, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(any)
			}
		}
		run(args[0].(string), args[1].(float64), args[2].(progress.Status), variadicArgs...)
	})
	return _c
}

func (_c *MockProgram_Update_Call) Return() *MockProgram_Update_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockProgram_Update_Call) RunAndReturn(run func(string, float64, progress.Status, ...any)) *MockProgram_Update_Call {
	_c.Run(run)
	return _c
}

// NewMockProgram creates a new instance of MockProgram. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProgram(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProgram {
	mock := &MockProgram{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
