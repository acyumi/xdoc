// Code generated by mockery v2.53.2. DO NOT EDIT.

package feishu

import (
	io "io"

	progress "github.com/acyumi/doc-exporter/component/progress"
	mock "github.com/stretchr/testify/mock"
)

// MockExporter is an autogenerated mock type for the IExporter type
type MockExporter struct {
	mock.Mock
}

type MockExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExporter) EXPECT() *MockExporter_Expecter {
	return &MockExporter_Expecter{mock: &_m.Mock}
}

// checkExport provides a mock function with given fields: di, ticket
func (_m *MockExporter) checkExport(di *DocumentInfo, ticket string) (*exportResult, progress.Status, error) {
	ret := _m.Called(di, ticket)

	if len(ret) == 0 {
		panic("no return value specified for checkExport")
	}

	var r0 *exportResult
	var r1 progress.Status
	var r2 error
	if rf, ok := ret.Get(0).(func(*DocumentInfo, string) (*exportResult, progress.Status, error)); ok {
		return rf(di, ticket)
	}
	if rf, ok := ret.Get(0).(func(*DocumentInfo, string) *exportResult); ok {
		r0 = rf(di, ticket)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exportResult)
		}
	}

	if rf, ok := ret.Get(1).(func(*DocumentInfo, string) progress.Status); ok {
		r1 = rf(di, ticket)
	} else {
		r1 = ret.Get(1).(progress.Status)
	}

	if rf, ok := ret.Get(2).(func(*DocumentInfo, string) error); ok {
		r2 = rf(di, ticket)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockExporter_checkExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'checkExport'
type MockExporter_checkExport_Call struct {
	*mock.Call
}

// checkExport is a helper method to define mock.On call
//   - di *DocumentInfo
//   - ticket string
func (_e *MockExporter_Expecter) checkExport(di any, ticket any) *MockExporter_checkExport_Call {
	return &MockExporter_checkExport_Call{Call: _e.mock.On("checkExport", di, ticket)}
}

func (_c *MockExporter_checkExport_Call) Run(run func(di *DocumentInfo, ticket string)) *MockExporter_checkExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*DocumentInfo), args[1].(string))
	})
	return _c
}

func (_c *MockExporter_checkExport_Call) Return(_a0 *exportResult, _a1 progress.Status, _a2 error) *MockExporter_checkExport_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockExporter_checkExport_Call) RunAndReturn(run func(*DocumentInfo, string) (*exportResult, progress.Status, error)) *MockExporter_checkExport_Call {
	_c.Call.Return(run)
	return _c
}

// doDownloadDirectly provides a mock function with given fields: filePath, fileToken
func (_m *MockExporter) doDownloadDirectly(filePath string, fileToken string) (io.Reader, int64, error) {
	ret := _m.Called(filePath, fileToken)

	if len(ret) == 0 {
		panic("no return value specified for doDownloadDirectly")
	}

	var r0 io.Reader
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, string) (io.Reader, int64, error)); ok {
		return rf(filePath, fileToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.Reader); ok {
		r0 = rf(filePath, fileToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) int64); ok {
		r1 = rf(filePath, fileToken)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(filePath, fileToken)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockExporter_doDownloadDirectly_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'doDownloadDirectly'
type MockExporter_doDownloadDirectly_Call struct {
	*mock.Call
}

// doDownloadDirectly is a helper method to define mock.On call
//   - filePath string
//   - fileToken string
func (_e *MockExporter_Expecter) doDownloadDirectly(filePath any, fileToken any) *MockExporter_doDownloadDirectly_Call {
	return &MockExporter_doDownloadDirectly_Call{Call: _e.mock.On("doDownloadDirectly", filePath, fileToken)}
}

func (_c *MockExporter_doDownloadDirectly_Call) Run(run func(filePath string, fileToken string)) *MockExporter_doDownloadDirectly_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockExporter_doDownloadDirectly_Call) Return(_a0 io.Reader, _a1 int64, _a2 error) *MockExporter_doDownloadDirectly_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockExporter_doDownloadDirectly_Call) RunAndReturn(run func(string, string) (io.Reader, int64, error)) *MockExporter_doDownloadDirectly_Call {
	_c.Call.Return(run)
	return _c
}

// doDownloadExported provides a mock function with given fields: filePath, fileToken
func (_m *MockExporter) doDownloadExported(filePath string, fileToken string) (io.Reader, error) {
	ret := _m.Called(filePath, fileToken)

	if len(ret) == 0 {
		panic("no return value specified for doDownloadExported")
	}

	var r0 io.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (io.Reader, error)); ok {
		return rf(filePath, fileToken)
	}
	if rf, ok := ret.Get(0).(func(string, string) io.Reader); ok {
		r0 = rf(filePath, fileToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(filePath, fileToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExporter_doDownloadExported_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'doDownloadExported'
type MockExporter_doDownloadExported_Call struct {
	*mock.Call
}

// doDownloadExported is a helper method to define mock.On call
//   - filePath string
//   - fileToken string
func (_e *MockExporter_Expecter) doDownloadExported(filePath any, fileToken any) *MockExporter_doDownloadExported_Call {
	return &MockExporter_doDownloadExported_Call{Call: _e.mock.On("doDownloadExported", filePath, fileToken)}
}

func (_c *MockExporter_doDownloadExported_Call) Run(run func(filePath string, fileToken string)) *MockExporter_doDownloadExported_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockExporter_doDownloadExported_Call) Return(_a0 io.Reader, _a1 error) *MockExporter_doDownloadExported_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExporter_doDownloadExported_Call) RunAndReturn(run func(string, string) (io.Reader, error)) *MockExporter_doDownloadExported_Call {
	_c.Call.Return(run)
	return _c
}

// doExport provides a mock function with given fields: di
func (_m *MockExporter) doExport(di *DocumentInfo) (string, error) {
	ret := _m.Called(di)

	if len(ret) == 0 {
		panic("no return value specified for doExport")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*DocumentInfo) (string, error)); ok {
		return rf(di)
	}
	if rf, ok := ret.Get(0).(func(*DocumentInfo) string); ok {
		r0 = rf(di)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*DocumentInfo) error); ok {
		r1 = rf(di)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExporter_doExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'doExport'
type MockExporter_doExport_Call struct {
	*mock.Call
}

// doExport is a helper method to define mock.On call
//   - di *DocumentInfo
func (_e *MockExporter_Expecter) doExport(di any) *MockExporter_doExport_Call {
	return &MockExporter_doExport_Call{Call: _e.mock.On("doExport", di)}
}

func (_c *MockExporter_doExport_Call) Run(run func(di *DocumentInfo)) *MockExporter_doExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*DocumentInfo))
	})
	return _c
}

func (_c *MockExporter_doExport_Call) Return(_a0 string, _a1 error) *MockExporter_doExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExporter_doExport_Call) RunAndReturn(run func(*DocumentInfo) (string, error)) *MockExporter_doExport_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExporter creates a new instance of MockExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExporter {
	mock := &MockExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
